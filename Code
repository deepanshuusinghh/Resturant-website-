import React, { useState, useMemo } from 'react';
import { ShoppingCart, Plus, Minus, Trash2, X } from 'lucide-react';

// --- MOCK DATA (Prices converted to INR) ---
const menuData = [
  { id: 1, name: 'Margherita Pizza', category: 'Main Course', price: 140.17, description: 'Classic pizza with fresh mozzarella, tomatoes, and basil.', image: 'https://placehold.co/600x400/f4a261/ffffff?text=Pizza' },
  { id: 2, name: 'Caesar Salad', category: 'Appetizers', price: 65.50, description: 'Crisp romaine lettuce with Caesar dressing, croutons, and Parmesan cheese.', image: 'https://placehold.co/600x400/2a9d8f/ffffff?text=Salad' },
  { id: 3, name: 'Spaghetti Carbonara', category: 'Main Course', price: 255.00, description: 'Pasta with creamy egg sauce, pancetta, and pecorino cheese.', image: 'https://placehold.co/600x400/e9c46a/ffffff?text=Pasta' },
  { id: 4, name: 'Bruschetta', category: 'Appetizers', price: 70.55, description: 'Toasted bread topped with fresh tomatoes, garlic, and olive oil.', image: 'https://placehold.co/600x400/f4a261/ffffff?text=Bruschetta' },
  { id: 5, name: 'Tiramisu', category: 'Desserts', price: 140.25, description: 'Classic Italian coffee-flavored dessert.', image: 'https://placehold.co/600x400/264653/ffffff?text=Tiramisu' },
  { id: 6, name: 'Lemonade', category: 'Drinks', price: 290.50, description: 'Freshly squeezed lemonade.', image: 'https://placehold.co/600x400/e76f51/ffffff?text=Lemonade' },
  { id: 7, name: 'Grilled Salmon', category: 'Main Course', price: 156.17, description: 'Salmon fillet grilled to perfection, served with asparagus.', image: 'https://placehold.co/600x400/2a9d8f/ffffff?text=Salmon' },
  { id: 8, name: 'Chocolate Lava Cake', category: 'Desserts', price: 80.50, description: 'Warm chocolate cake with a gooey molten center.', image: 'https://placehold.co/600x400/264653/ffffff?text=Cake' },
  { id: 9, name: 'Iced Tea', category: 'Drinks', price: 249.00, description: 'Freshly brewed iced tea.', image: 'https://placehold.co/600x400/e76f51/ffffff?text=Iced+Tea' },
];

const categories = ['All', 'Appetizers', 'Main Course', 'Desserts', 'Drinks'];

// --- COMPONENTS ---

// MenuItem Component: Displays a single menu item
const MenuItem = ({ item, onAddToCart }) => (
  <div className="bg-white rounded-xl shadow-lg overflow-hidden transform hover:scale-105 transition-transform duration-300 ease-in-out flex flex-col">
    <img src={item.image} alt={item.name} className="w-full h-48 object-cover" onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/600x400/cccccc/ffffff?text=Image+Not+Found'; }} />
    <div className="p-6 flex flex-col flex-grow">
      <h3 className="text-2xl font-bold text-gray-800 mb-2">{item.name}</h3>
      <p className="text-gray-600 mb-4 flex-grow">{item.description}</p>
      <div className="flex justify-between items-center">
        <p className="text-2xl font-semibold text-orange-500">₹{item.price.toFixed(2)}</p>
        <button
          onClick={() => onAddToCart(item)}
          className="bg-orange-500 text-white font-bold py-2 px-4 rounded-full hover:bg-orange-600 transition-colors duration-300 flex items-center gap-2"
        >
          <ShoppingCart size={18} />
          <span>Add</span>
        </button>
      </div>
    </div>
  </div>
);

// CategoryTabs Component: Renders filter tabs
const CategoryTabs = ({ selectedCategory, onSelectCategory }) => (
  <div className="flex flex-wrap justify-center gap-2 md:gap-4 mb-8 md:mb-12">
    {categories.map(category => (
      <button
        key={category}
        onClick={() => onSelectCategory(category)}
        className={`px-6 py-2 text-sm md:text-base font-semibold rounded-full transition-all duration-300 ${
          selectedCategory === category
            ? 'bg-orange-500 text-white shadow-md'
            : 'bg-white text-gray-700 hover:bg-orange-100'
        }`}
      >
        {category}
      </button>
    ))}
  </div>
);

// CartItem Component: Displays an item in the cart
const CartItem = ({ item, onUpdateQuantity, onRemoveItem }) => (
    <div className="flex items-center justify-between py-4 border-b border-gray-200">
        <div className="flex items-center gap-4">
            <img src={item.image} alt={item.name} className="w-16 h-16 object-cover rounded-lg" />
            <div>
                <p className="font-bold text-gray-800">{item.name}</p>
                <p className="text-gray-500 text-sm">₹{item.price.toFixed(2)}</p>
            </div>
        </div>
        <div className="flex items-center gap-3">
            <button onClick={() => onUpdateQuantity(item.id, item.quantity - 1)} className="p-1 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors">
                <Minus size={16} className="text-gray-700" />
            </button>
            <span className="font-bold w-6 text-center">{item.quantity}</span>
            <button onClick={() => onUpdateQuantity(item.id, item.quantity + 1)} className="p-1 rounded-full bg-gray-200 hover:bg-gray-300 transition-colors">
                <Plus size={16} className="text-gray-700" />
            </button>
            <button onClick={() => onRemoveItem(item.id)} className="ml-2 p-2 rounded-full hover:bg-red-100 transition-colors">
                <Trash2 size={20} className="text-red-500" />
            </button>
        </div>
    </div>
);


// Cart Component: The shopping cart sidebar
const Cart = ({ cartItems, onUpdateQuantity, onRemoveItem, onPlaceOrder, isCartVisible, toggleCart }) => {
    const subtotal = useMemo(() => cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0), [cartItems]);
    const tax = subtotal * 0.08;
    const total = subtotal + tax;

    return (
        <div className={`fixed top-0 right-0 h-full bg-white shadow-2xl transform transition-transform duration-300 ease-in-out ${isCartVisible ? 'translate-x-0' : 'translate-x-full'} w-full md:w-1/3 lg:w-1/4 z-50 flex flex-col`}>
            <div className="flex justify-between items-center p-6 border-b border-gray-200 bg-gray-50">
                <h2 className="text-2xl font-bold text-gray-800">Your Order</h2>
                <button onClick={toggleCart} className="p-2 rounded-full hover:bg-gray-200">
                    <X size={24} className="text-gray-600"/>
                </button>
            </div>

            {cartItems.length === 0 ? (
                <div className="flex-grow flex flex-col items-center justify-center text-center p-6">
                    <ShoppingCart size={64} className="text-gray-300 mb-4" />
                    <p className="text-gray-500">Your cart is empty.</p>
                    <p className="text-sm text-gray-400">Add items from the menu to get started!</p>
                </div>
            ) : (
                <div className="flex-grow overflow-y-auto px-6">
                    {cartItems.map(item => (
                        <CartItem key={item.id} item={item} onUpdateQuantity={onUpdateQuantity} onRemoveItem={onRemoveItem} />
                    ))}
                </div>
            )}
            
            {cartItems.length > 0 && (
                <div className="p-6 border-t border-gray-200 bg-gray-50">
                    <div className="space-y-2 mb-4">
                        <div className="flex justify-between text-gray-600">
                            <span>Subtotal</span>
                            <span>₹{subtotal.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between text-gray-600">
                            <span>Tax (8%)</span>
                            <span>₹{tax.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between font-bold text-xl text-gray-800">
                            <span>Total</span>
                            <span>₹{total.toFixed(2)}</span>
                        </div>
                    </div>
                    <button
                        onClick={onPlaceOrder}
                        className="w-full bg-green-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-600 transition-colors duration-300 text-lg"
                    >
                        Place Order
                    </button>
                </div>
            )}
        </div>
    );
};

// OrderSuccessModal Component
const OrderSuccessModal = ({ isOpen, onClose }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-2xl shadow-xl p-8 text-center max-w-sm mx-auto transform transition-all scale-100">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-10 h-10 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path></svg>
                </div>
                <h2 className="text-2xl font-bold text-gray-800 mb-2">Order Placed!</h2>
                <p className="text-gray-600 mb-6">Thank you for your order. It will be ready shortly.</p>
                <button
                    onClick={onClose}
                    className="w-full bg-orange-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-orange-600 transition-colors"
                >
                    Awesome!
                </button>
            </div>
        </div>
    );
};


// Main App Component
export default function App() {
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [cartItems, setCartItems] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isCartVisible, setIsCartVisible] = useState(false);

  const handleAddToCart = (itemToAdd) => {
    setCartItems(prevItems => {
      const existingItem = prevItems.find(item => item.id === itemToAdd.id);
      if (existingItem) {
        return prevItems.map(item =>
          item.id === itemToAdd.id ? { ...item, quantity: item.quantity + 1 } : item
        );
      }
      return [...prevItems, { ...itemToAdd, quantity: 1 }];
    });
    setIsCartVisible(true); // Open cart when item is added
  };

  const handleUpdateQuantity = (itemId, newQuantity) => {
    if (newQuantity < 1) {
        handleRemoveItem(itemId);
    } else {
        setCartItems(prevItems =>
            prevItems.map(item =>
                item.id === itemId ? { ...item, quantity: newQuantity } : item
            )
        );
    }
  };
  
  const handleRemoveItem = (itemId) => {
      setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));
  };


  const handlePlaceOrder = () => {
    if (cartItems.length > 0) {
        setIsModalOpen(true);
        setIsCartVisible(false); // Close cart after placing order
    }
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setCartItems([]);
  };

  const toggleCart = () => {
      setIsCartVisible(!isCartVisible);
  }

  const filteredMenuItems = useMemo(() =>
    selectedCategory === 'All'
      ? menuData
      : menuData.filter(item => item.category === selectedCategory)
  , [selectedCategory]);

  const cartItemCount = useMemo(() => cartItems.reduce((count, item) => count + item.quantity, 0), [cartItems]);

  return (
    <div className="bg-orange-50 min-h-screen font-sans text-gray-900">
      {/* Header */}
      <header className="bg-white shadow-md sticky top-0 z-40">
        <div className="container mx-auto px-6 py-4 flex justify-between items-center">
          <h1 className="text-3xl font-bold text-orange-500">FlavorFleet</h1>
          <button onClick={toggleCart} className="relative p-2 rounded-full hover:bg-gray-100">
            <ShoppingCart size={28} className="text-gray-600"/>
            {cartItemCount > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                {cartItemCount}
              </span>
            )}
          </button>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-6 py-8 md:py-12">
        <div className="text-center mb-8 md:mb-12">
            <h2 className="text-4xl md:text-5xl font-extrabold text-gray-800 mb-2">Our Delicious Menu</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">Explore our wide range of dishes, crafted with the freshest ingredients.</p>
        </div>
        
        <CategoryTabs selectedCategory={selectedCategory} onSelectCategory={setSelectedCategory} />

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {filteredMenuItems.map(item => (
            <MenuItem key={item.id} item={item} onAddToCart={handleAddToCart} />
          ))}
        </div>
      </main>
      
      {/* Cart Sidebar */}
      <Cart
        cartItems={cartItems}
        onUpdateQuantity={handleUpdateQuantity}
        onRemoveItem={handleRemoveItem}
        onPlaceOrder={handlePlaceOrder}
        isCartVisible={isCartVisible}
        toggleCart={toggleCart}
      />
      {/* Cart Overlay */}
      {isCartVisible && <div onClick={toggleCart} className="fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity"></div>}


      {/* Order Success Modal */}
      <OrderSuccessModal isOpen={isModalOpen} onClose={handleCloseModal} />
    </div>
  );
}

